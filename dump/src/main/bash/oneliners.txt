# copy (and re-compress) all .gz files to .bz2 files in background process, write log output to compress.log
{ for file in $(find -name '*.gz') ; do echo $file ; gzip -d <$file | bzip2 -c >${file/%.gz/.bz2} ; done } &>compress.log &

# pbzip2 is much faster with multiple cores / CPUs
{ for file in $(find -name '*.gz') ; do echo $file ; gzip -d <$file | pbzip2 -c >${file/%.gz/.bz2} ; fi ; done } &>compress.log &

# Don't overwrite existing non-empty .bz2 files.
{ for file in $(find -name '*.gz') ; do copy=${file/%.gz/.bz2} ; if [[ ! -s $copy ]] ; then echo $file ; gzip -d <$file | pbzip2 -c >$copy ; fi ; done } &>compress.log &

# Only generate .bz2 file if it doesn't exist or is older than .gz file.
{ for file in $(find -name '*.gz') ; do copy=${file/%.gz/.bz2} ; if [[ "$file" -nt "$copy" ]] ; then echo $file ; gzip -d <$file | pbzip2 -c >$copy ; fi ; done } &>compress.log &

# sort a triples file by property (field 2)
# -s means 'stable' - without it, other fields are also sorted, which is a waste of time
sort -s -k 2,2 enwiki-20120601-infobox-properties.ttl >enwiki-20120601-infobox-properties.sorted.ttl

# split a triples file (must be sorted by property name) into separate files for each property
# 29 is the length of the string '<http://dbpedia.org/property/'
# 50 is an arbitrary cutoff to avoid overly long file names
awk '{if ($1 != "#") { if ($2 != last) {last = $2; close(file); counter++; len = length($2) - 29; if (len > 50) len = 50; name = substr($2, 29, len); gsub(/\//, "", name); file = "split-by-property/" sprintf("%.6d", counter) "-" name ".ttl" } print >> file } }' enwiki-20120601-infobox-properties.sorted.ttl

# delete all but the latest directory for each language and print how many GB were freed / kept
# assumes that the shell sorts the result of */* alphabetically
# run this script in base dir of all languages!
# WARNING: even if the latest directory for a language is empty or almost empty, all other directories 
# for this language will be deleted! You probably don't want this. I sure didn't... :-(
du -B 1 -s */* | awk '{split($2, arr, "/"); if (arr[2] != "index.html") { if (name == arr[1]) { system("rm -fr " dir); print dir " <<< gone"; gone += size } else if (name != "") { print dir " <<< kept"; kept += size } name = arr[1]; size = $1; dir = $2 } } END {print dir " <<< kept"; print gone / 1024 / 1024 / 1024; print kept / 1024 / 1024 / 1024 }'