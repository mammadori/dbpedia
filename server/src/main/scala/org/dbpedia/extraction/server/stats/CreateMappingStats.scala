package org.dbpedia.extraction.server.stats

import java.util.logging.Logger
import io.Source
import java.lang.IllegalArgumentException
import org.dbpedia.extraction.wikiparser.impl.wikipedia.Namespaces
import org.dbpedia.extraction.wikiparser._
import org.dbpedia.extraction.mappings._
import org.dbpedia.extraction.util.{WikiUtil,Language,Finder}
import org.dbpedia.extraction.util.RichFile.toRichFile
import scala.Serializable
import java.io._
import org.dbpedia.extraction.server.Server
import org.dbpedia.extraction.destinations.{DBpediaDatasets,Dataset}
import org.dbpedia.extraction.server.stats.CreateMappingStats._
import java.net.{URLDecoder, URLEncoder}
import org.dbpedia.extraction.util.StringUtils.prettyMillis

/**
 * Script to gather statistics about templates and properties:
 * - which templates exist?
 * - which parameters (properties) does each template have?
 * - on how many pages / how often in total is a template used?
 * - how often is each paramater (property) used?
 * 
 * Needs the following files (where xx is the wiki file prefix and yyyy-mm-dd is a date):
 * 
 * xxwiki-yyyy-mm-dd-infobox-properties.ttl
 * xxwiki-yyyy-mm-dd-infobox-property-definitions.ttl
 * xxwiki-yyyy-mm-dd-infobox-test.ttl
 * xxwiki-yyyy-mm-dd-redirects.ttl
 * xxwiki-yyyy-mm-dd-template-parameters.tt
 * 
 * FIXME: also allow .bz2 / .gz input filesl
 *
 * Which  are generated by the following extractors:
 * 
 * org.dbpedia.extraction.mappings.RedirectExtractor
 * org.dbpedia.extraction.mappings.InfoboxExtractor
 * org.dbpedia.extraction.mappings.TemplateParameterExtractor
 * 
 * TODO: The extraction framework should be flexible and configurable enough that
 * it can write simpler formats besides N-Triples. This class would be MUCH simpler and faster
 * if it had to read simple text files without N-Triples and URI-encoding.
 */
object CreateMappingStats
{
    val logger = Logger.getLogger(getClass.getName)
    
    def main(args: Array[String])
    {
        require (args != null && args.length >= 3, "need at least three args: input dir, output dir, pretty-printing flag. may be followed by list of language codes.")
        
        val inputDir = new File(args(0))
        
        val statsDir = new File(args(1))
        
        val pretty = args(2).toBoolean

        // Use all remaining args as language codes or comma or whitespace separated lists of codes
        var languages: Seq[Language] = for(arg <- args.drop(3); lang <- arg.split("[,\\s]"); if (lang.nonEmpty)) yield Language(lang)
          
        // if no languages are given, use all languages for which a mapping namespace is defined
        if (languages.isEmpty) languages = Namespace.mappings.keySet.toSeq
        
        for (language <- languages.sorted(Language.wikiCodeOrdering)) {
          
            val millis = System.currentTimeMillis()
            
            logger.info("creating statistics for "+language.wikiCode)
            
            val finder = new Finder[File](inputDir, language)
            
            // Note: org.dbpedia.extraction.dump.extract.Extraction.Complete = "extraction-complete"
            // TODO: move that constant to core, or use config value
            val date = finder.dates("extraction-complete").last
            
            def inputFile(dataset: Dataset): File = {
              finder.file(date, dataset.name.replace('_', '-')+".ttl")
            }
            
            // extracted by org.dbpedia.extraction.mappings.RedirectExtractor
            val redirects = inputFile(DBpediaDatasets.Redirects)
            // extracted by org.dbpedia.extraction.mappings.InfoboxExtractor
            val infoboxProperties = inputFile(DBpediaDatasets.InfoboxProperties)
            // extracted by org.dbpedia.extraction.mappings.TemplateParameterExtractor
            val templateParameters = inputFile(DBpediaDatasets.TemplateVariables)
            // extracted by org.dbpedia.extraction.mappings.InfoboxExtractor
            val infoboxTest = inputFile(DBpediaDatasets.InfoboxTest)
            
            val builder = new MappingStatsBuilder(statsDir, language, pretty)
    
            builder.buildStats(redirects, infoboxProperties, templateParameters, infoboxTest)
            
            // load them right back to check that the format is ok
            new MappingStatsManager(statsDir, language)
            
            logger.info("created statistics for "+language.wikiCode+" in "+prettyMillis(System.currentTimeMillis - millis))
        }
    }
}
